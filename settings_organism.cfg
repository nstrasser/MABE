% BRAIN
  brainType = BiLog                          #(string) brain to be used, [BiLog]

% BRAIN_BiLog
  hiddenLayerSizeList = NONE                 #(string) what are the lengths of your hidden nodes? (if setting one size for all hidden nodes use a single integer
                                             #  i.e. 4; if you are setting the length of each layer individually use comma seperated integers with no spaces i.e.
                                             #  "3,2,5" ) default=NONE
  inputAlwaysAvailable = 0                   #(bool) are the input nodes available as input to all hidden layers? default=false
  nrOfHiddenLayers = 0                       #(int) how many hidden layers does the brain have? default=0 (this number should match the length of the hidden layer
                                             #  size list)
  nrOfRecurrentNodes = 0                     #(int) how many recurrent nodes does the brain have? default=0
  outputAlwaysAvailable = 0                  #(bool) are the output nodes available as input to all hidden layers? (only enable this if recurrentOutput = true)
                                             #  default=false
  recurrentAlwaysAvailable = 0               #(bool) are the recurrent nodes available as input to all hidden layers? default=false
  recurrentOutput = 0                        #(bool) is the output fed back as input? default=false

% BRAIN_BiLog_MUTATIONS
  mutationRateLogic1 = 0.01                  #(double) chance for a single point mutation to a gates logic per gate
  mutationRateLogic2 = 0.01                  #(double) chance for a double point mutation to a gates logic per gate
  mutationRateLogic3 = 0.01                  #(double) chance for a triple point mutation to a gates logic per gate
  mutationRateLogic4 = 0.01                  #(double) chance for a quadruple point mutation to a gates logic per gate
  mutationRateWires1 = 0.01                  #(double) chance for a single wire mutation per gate
  mutationRateWires2 = 0.01                  #(double) chance for a double wire mutation per gate
  mutation_Program_Filename =                #(string) if a file name is provided, mutation rates will be set using this file
                                             #  The file needs to be in CSV format and must contain the following columns:
                                             #  update,onePerBrain,onePerGate,wire1,wire2,logic1,logic2,logic3,logic4
                                             #  when Global::update = update for each row, each of the mutation parameters
                                             #  will be set to associated values. If the first update is not 0, then the
                                             #  paramters values will be used until the first defined update.
                                             #  An example file is provided: Brain/BiLogBrain/mutation_program.csv
  onePerBrain = -1.0                         #(double) If value is positive, then mutations will be limited to one per brain at this rate per brain.
                                             #  The distribution of mutations will be determined by the ratios of the defined mutation rates.
  onePerGate = -1.0                          #(double) If value is positive, then mutations will be limited to one per gate at this rate per gate.
                                             #  The distribution of mutations will be determined by the ratios of the defined mutation rates.
                                             #  If onePerBrain is set then onePerGate will be ignored
  recordMutationHistory = 0                  #(bool) If true, mutations will be recorded into data and max files. This may generate large data files!

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

